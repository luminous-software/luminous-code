{
    "docs": [
        {
            "location": "/",
            "text": "I just don't understand why anyone would want to write the same old low-level code to accomplish a particular task each\nand every time they need it? Unfortunately, the practice is a lot more common than you might think!\n\n\nI don't know about you, but I \nhate\n maintaining code like that.\n\n\n\n\nIn 1991, John F. Woods wrote:\n\n\nAlways code as if the guy who ends up maintaining your code will be a violent psychopath\nwho knows where you live.\n\n\n\n\nIn essence, code not only for yourself, but also for future developers who will have to maintain your code.\n\n\nWhat Is Luminous Code\n\u00b6\n\n\nLuminous Code\n is a collection of projects, namespaces, classes, methods, and extention methods,\nthat I wrote to keep the code that I need to write in my various projects as \nDRY\n as possible! \nIt's driven by my own needs as a developer,\nbut I'm more than happy to share it with anyone who might find it useful,\nand to accept suggestions, pull requests or bug reports.\n\n\nWhenever I find myself writing the same code again, I first extract it into a new class or a new method,\nas a lot of experienced developers will do.\nThen as soon as I can, \nI'll transfer the code to the appropriate \nLuminous Code\n namespace so that I can reuse it myself in various projects,\nand also release it for others to benefit from as well.\n\n\nAlso, if it's taken me some time to figure out how to do something \nnew\n, I'll add it into the framework too.\nThat way I'm not constantly reinventing the wheel, so to speak. I figure it out \nonce\n, not \nevery\n\ntime I need the same task done.\n\n\n\n\nLuminous Code helps you to:\n\n\n\n\nkeep your code as DRY as possible\n\n\nwrite code that is more easily maintained\n\n\nwrite code that has clear and obvious intent\n\n\n\n\n\n\nClear and Obvious Intent\n\u00b6\n\n\nIt isn't really all that easy to understand what multiple lines of low-level code are actually\ndesigned to accomplish when you come back to the code days, weeks, months, or even years later!\nWithout working your way through each line, you have no real idea what the \nintent\n of the code is.\n\n\n\n\nWhich lines of code would you rather be maintaining?\n\n\n(this code - example 1)\n\n\nor\n\n\n(this code - example 2)\n\n\n\n\nThe \nintent\n of any code that you write should be \nclear\n and \nobvious\n to anyone who is using or maintaining\nyour code (even if it's you). \nOne of the main reasons that I wrote the \nLuminous Code\n was so I could use code that has \nclear and obvious intent\n.\n\n\nDonations Appreciated\n\u00b6\n\n\nIf you happen to find \nLuminous Code\n useful and would like to support future development,\nmaybe you could shout me a coke (as I don't actually drink coffee or beer, lol).",
            "title": "Overview"
        },
        {
            "location": "/#what-is-luminous-code",
            "text": "Luminous Code  is a collection of projects, namespaces, classes, methods, and extention methods,\nthat I wrote to keep the code that I need to write in my various projects as  DRY  as possible! \nIt's driven by my own needs as a developer,\nbut I'm more than happy to share it with anyone who might find it useful,\nand to accept suggestions, pull requests or bug reports.  Whenever I find myself writing the same code again, I first extract it into a new class or a new method,\nas a lot of experienced developers will do.\nThen as soon as I can, \nI'll transfer the code to the appropriate  Luminous Code  namespace so that I can reuse it myself in various projects,\nand also release it for others to benefit from as well.  Also, if it's taken me some time to figure out how to do something  new , I'll add it into the framework too.\nThat way I'm not constantly reinventing the wheel, so to speak. I figure it out  once , not  every \ntime I need the same task done.   Luminous Code helps you to:   keep your code as DRY as possible  write code that is more easily maintained  write code that has clear and obvious intent",
            "title": "What Is Luminous Code"
        },
        {
            "location": "/#clear-and-obvious-intent",
            "text": "It isn't really all that easy to understand what multiple lines of low-level code are actually\ndesigned to accomplish when you come back to the code days, weeks, months, or even years later!\nWithout working your way through each line, you have no real idea what the  intent  of the code is.   Which lines of code would you rather be maintaining?  (this code - example 1)  or  (this code - example 2)   The  intent  of any code that you write should be  clear  and  obvious  to anyone who is using or maintaining\nyour code (even if it's you). \nOne of the main reasons that I wrote the  Luminous Code  was so I could use code that has  clear and obvious intent .",
            "title": "Clear and Obvious Intent"
        },
        {
            "location": "/#donations-appreciated",
            "text": "If you happen to find  Luminous Code  useful and would like to support future development,\nmaybe you could shout me a coke (as I don't actually drink coffee or beer, lol).",
            "title": "Donations Appreciated"
        },
        {
            "location": "/getting-started/",
            "text": "Download From Nuget.org\n\u00b6\n\n\nThere are two Nuget packagesto download:\n\n\n\n\nLuminous.Code.Core\n\n\nLuminous.Code.VisualStudio\n\n\n\n\n\n\nInstall Via Nuget Package  Manager\n\u00b6\n\n\n\n\nRight-click on the project where you want to install the package(s)\n\n\nSelect \nManage Nuget Packages\n\n\nType \nluminous.code\n in the search box\n\n\nClick on the package(s) you want to install\n\n\nClick the \nInstall\n button\n\n\n\n\n\n\nInstall Via Package Manager Console\n\u00b6\n\n\n\n\nClick on the project where you want to install the package(s)\n\n\nClick View | Other Windows | Package Manager Console\n\n\nMake sure the correct project is selected as \nDefault Project\n\n\nType \ninstall-package luminous.code.core\n or \ninstall-package luminous.code.visualstudio\n\n\nPress \nENTER",
            "title": "Getting Started"
        },
        {
            "location": "/getting-started/#download-from-nugetorg",
            "text": "There are two Nuget packagesto download:   Luminous.Code.Core  Luminous.Code.VisualStudio",
            "title": "Download From Nuget.org"
        },
        {
            "location": "/getting-started/#install-via-nuget-package-manager",
            "text": "Right-click on the project where you want to install the package(s)  Select  Manage Nuget Packages  Type  luminous.code  in the search box  Click on the package(s) you want to install  Click the  Install  button",
            "title": "Install Via Nuget Package  Manager"
        },
        {
            "location": "/getting-started/#install-via-package-manager-console",
            "text": "Click on the project where you want to install the package(s)  Click View | Other Windows | Package Manager Console  Make sure the correct project is selected as  Default Project  Type  install-package luminous.code.core  or  install-package luminous.code.visualstudio  Press  ENTER",
            "title": "Install Via Package Manager Console"
        },
        {
            "location": "/api/",
            "text": "Work In Progress\n\n\nThis documentation is still a work-in-progress.\n\n\n\n\nLuminous Code\n currently consists of two Nuget packages:\n\n\n\n\nLuminous.Code.Core\n\n\nLuminous.Code.VisualStudio\n\n\n\n\nLuminous.Code.Core\n\u00b6\n\n\nLuminous.Code.Core\n is a plain C# class library project that contains the lower level classes, methods and extension methods that get used by more\nspecialised projects such as \nLuminous.Code.VisualStudio\n.\n\n\n\n\nLack of 'Core' in the Namespace Names\n\n\nI decided that there was no benefit to including \nCore\n in the namespaces because it sometimes made the namespaces sound a bit odd.\n\n\n\n\nExtensions Namespace\n\u00b6\n\n\nExceptionExtensions\n\u00b6\n\n\nThe \nLuminous.Code.Extensions.ExceptionExtensions\n namespace is fairly self-explanatory.\nIt contains a set of extension methods that extend the \nException\n type.\n\n\n\n\n\n\nExtendedMessage Method\n\n\nThe \nExtendedMessage\n method returns the message of the innermost exception,\nor the original exception message if no inner exceptions exist.\n\n\n\n\n\n\nStringExtensions\n\u00b6\n\n\nThe \nLuminous.Code.Extensions.StringExtensions\n namespace is fairly self-explanatory.\nIt contains a set of extension methods that extend the \nstring\n type.\n\n\n\n\n\n\nJoinWith Method\n\n\n\n\n\n\nTo<T> Method\n\n\n\n\n\n\nLuminous.Code.VisualStudio\n\u00b6\n\n\nLuminous.Code.VisualStudio\n is a plain C# class library project that contains the lower level classes,\nmethods and extension methods that pertain to creating Visual Studio extensions.\n\n\nIt has a project reference to the \nLuminous.Code.Core\n project, as it relies on some of the code in it.\n\n\nCommands Namespace\n\u00b6\n\n\nThe \nLuminous.Code.VisualStudio.Commands\n namespace contains all of the plumbing code that\na command needs to interact with the Visual Studio IDE (via the command's parent package).\n\n\nAsyncCommandBase\n\u00b6\n\n\nThe \nLuminous.Code.VisualStudio.Commands.AsyncCommandBase\n class is an abstract class, which acts as the\ncommon base class for the \nAsyncStaticCommand\n class and the \nAsyncDynamicCommand\n class.\n\n\nIt contains all of the plumbing code that a command needs to interact easily with\nits parent package. It also has the ability to communicate with the IDE.\n\n\nAsyncDynamicCommand\n\u00b6\n\n\nThe \nLuminous.Code.VisualStudio.Commands.AsyncDynamicCommand\n class can be used for commands whose \ntext\n may need to change,\nand/or which may need to dynamically determine if the command needs to be \nvisible\n or \nenabled\n.\nThree sensibly-named overridable properties are provided to make this easy and flexible.\n\n\nBoth the command's \nVisible\n property and \nEnabled\n property are automatically calculated based on the values of\n\nCanExecute\n and \nIsActive\n.\n\n\n\n\n\n\nCanExecute Property\n\n\nIf \nCanExecute\n returns \nfalse\n, the command cannot be executed at all.\nThe command's \nVisible\n and \nEnabled\n properties will both automatically be set to \nfalse\n.\n\n\nFor example, command classes that inherit from \nAsyncDynamicCommand\n can override this\nproperty to return, say, a package-wide value that can be set in \nTools\n | \nOptions\n,\nor use some other method of determining if the command's functionality should be turned\noff.\n\n\n\n\n\n\nIsActive Property\n\n\nIf \nIsActive\n returns \nfalse\n, the command's \nEnabled\n property is automatically set to false.\nA common use for this property is to be able to check a \nUI Context\n.\n\n\n\n\n\n\nText Property\n\n\nThe \nText\n property, as its name suggests, sets the command's display text. Its initial value is \nnull\n,\nwhich instructs the famework to use the value set in the \nVSCT\n file.\n\n\n\n\n\n\nAsyncStaticCommand\n\u00b6\n\n\nThe \nLuminous.Code.VisualStudio.Commands.AsyncStaticCommand\n class is useful for commands whose text doesn't need to change,\nand which are always visible and always enabled.\n\n\nCommandBase (deprecated)\n\u00b6\n\n\nThe \nLuminous.Code.VisualStudio.Commands.CommandBase\n class has been deprecated in favor of \nAsyncCommandBase\n.\n\n\nCommand Keys\n\u00b6\n\n\nCommandResult\n\u00b6\n\n\n\n\n\n\nCancelledResult\n\n\n\n\n\n\nInformationResult\n\n\n\n\n\n\nProblemResult\n\n\n\n\n\n\nSuccessResult\n\n\n\n\n\n\nCommandStatuses\n\u00b6\n\n\nDynamicCommand (deprecated)\n\u00b6\n\n\nThe \nLuminous.Code.VisualStudio.Commands.DynamicCommand\n class has been deprecated in favor of \nAsyncDynamicCommand\n.\n\n\nStaticCommand (deprecated)\n\u00b6\n\n\nThe \nLuminous.Code.VisualStudio.Commands.DynamicCommand\n class has been deprecated in favor of \nAsyncDynamicCommand\n.\n\n\nConstants Namespace\n\u00b6\n\n\nVsVersions\n\u00b6\n\n\nExtensions Namespace\n\u00b6\n\n\nIntegerExtensions\n\u00b6\n\n\nIWpfTextViewHostExtensions\n\u00b6\n\n\nProjectItemsExtensions\n\u00b6\n\n\nServiceProviderExtensions\n\u00b6\n\n\nPackages Namespace\n\u00b6\n\n\nThe \nLuminous.Code.VisualStudio.Packages\n namespace contains all of the plumbing code that\na Visual Studio package needs to interact with the Visual Studio IDE.\n\n\nAsyncPackageBase\n\u00b6\n\n\nThe \nLuminous.Code.VisualStudio.Packages.AsyncPackageBase\n class is an abstract base class from which you inherit your own\npackages.\n\n\n\n\n\n\nGetService<T>\n\n\nThe \nGetService<T>\n method is a small piece of syntactic sugar around \nPackage.GetService\n,\nwhich avoids the need for\ntypeof\n and takes care of the cast to \nT\n as well.\n\n\nI just find it nicer to be able to write \nGetService<ISomeInterface>\n than\n\nGetService(typeof(T)) as T\n.\n\n\n\n\n\n\nGetService\n()\n\n\nThe \nGetService<TSource, TTarget>\n method takes it a step further,\nfor when you need to query a service and cast it to an interface\n(which happens a lot when dealing with Visual Studio services).\n\n\nAgain, I find it nicer to write \nGetService<SomeService, ISomeInterface>\n\nthan \nGetService(typeof(TSource)) as TTarget\n.\n\n\n\n\n\n\nGetServiceAsync\n()\n\n\nGetServiceAsync<T>\n was going to be the async version of \nGetService<T>\n,\nso I could get my services in \nInitializeAsync\n before switching to the main thread.\nBut it turns out there was a problem I wasn't aware of, which meant that there was no benefit\nto have the async version.\n\n\n\n\nSame went on to explain:\n\n\n\n\n\n\n\n\nGetServiceAsync\n()\n\n\nGetServiceAsync<TSource, TTarget>\n would suffer the same restriction,\nso again there was no need for the method.\n\n\n\n\n\n\nShowToolWindow<T>\n\n\nThe \nShowToolWindow<T>\n method is for situations that only allow a single tool window.\n\n\n\n\n\n\nShowNewToolWindow<T>\n\n\nThe \nShowNewToolWindow<T>\n method is for situations that allow multiple tool windows.\n\n\n\n\n\n\nOpenFolder\n\n\nThe \nOpenFolder\n method opens the suppliedfolder path in a File Explorer window.\n\n\nIt abstracts away the \nMicrosoft.VisualStudio.Shell.Package\n and commands that interact with the Visual Studio IDE.\n\n\n\n\n\n\nPackageBase (deprecated)\n\u00b6\n\n\nThe \nLuminous.Code.VisualStudio.Packages.PackageBase\n class has been deprecated in favor of the \nAsyncPackageBase\n class.\n\n\nSolutions Namespace\n\u00b6\n\n\nSolutionExplorerItemType\n\u00b6\n\n\nSolutionItemKind\n\u00b6\n\n\nVSHierarchies Namespace\n\u00b6\n\n\nIVsHierarchyNodeInfo\n\u00b6",
            "title": "API Description"
        },
        {
            "location": "/api/#luminouscodecore",
            "text": "Luminous.Code.Core  is a plain C# class library project that contains the lower level classes, methods and extension methods that get used by more\nspecialised projects such as  Luminous.Code.VisualStudio .   Lack of 'Core' in the Namespace Names  I decided that there was no benefit to including  Core  in the namespaces because it sometimes made the namespaces sound a bit odd.",
            "title": "Luminous.Code.Core"
        },
        {
            "location": "/api/#extensions-namespace",
            "text": "",
            "title": "Extensions Namespace"
        },
        {
            "location": "/api/#exceptionextensions",
            "text": "The  Luminous.Code.Extensions.ExceptionExtensions  namespace is fairly self-explanatory.\nIt contains a set of extension methods that extend the  Exception  type.    ExtendedMessage Method  The  ExtendedMessage  method returns the message of the innermost exception,\nor the original exception message if no inner exceptions exist.",
            "title": "ExceptionExtensions"
        },
        {
            "location": "/api/#stringextensions",
            "text": "The  Luminous.Code.Extensions.StringExtensions  namespace is fairly self-explanatory.\nIt contains a set of extension methods that extend the  string  type.    JoinWith Method    To<T> Method",
            "title": "StringExtensions"
        },
        {
            "location": "/api/#luminouscodevisualstudio",
            "text": "Luminous.Code.VisualStudio  is a plain C# class library project that contains the lower level classes,\nmethods and extension methods that pertain to creating Visual Studio extensions.  It has a project reference to the  Luminous.Code.Core  project, as it relies on some of the code in it.",
            "title": "Luminous.Code.VisualStudio"
        },
        {
            "location": "/api/#commands-namespace",
            "text": "The  Luminous.Code.VisualStudio.Commands  namespace contains all of the plumbing code that\na command needs to interact with the Visual Studio IDE (via the command's parent package).",
            "title": "Commands Namespace"
        },
        {
            "location": "/api/#asynccommandbase",
            "text": "The  Luminous.Code.VisualStudio.Commands.AsyncCommandBase  class is an abstract class, which acts as the\ncommon base class for the  AsyncStaticCommand  class and the  AsyncDynamicCommand  class.  It contains all of the plumbing code that a command needs to interact easily with\nits parent package. It also has the ability to communicate with the IDE.",
            "title": "AsyncCommandBase"
        },
        {
            "location": "/api/#asyncdynamiccommand",
            "text": "The  Luminous.Code.VisualStudio.Commands.AsyncDynamicCommand  class can be used for commands whose  text  may need to change,\nand/or which may need to dynamically determine if the command needs to be  visible  or  enabled .\nThree sensibly-named overridable properties are provided to make this easy and flexible.  Both the command's  Visible  property and  Enabled  property are automatically calculated based on the values of CanExecute  and  IsActive .    CanExecute Property  If  CanExecute  returns  false , the command cannot be executed at all.\nThe command's  Visible  and  Enabled  properties will both automatically be set to  false .  For example, command classes that inherit from  AsyncDynamicCommand  can override this\nproperty to return, say, a package-wide value that can be set in  Tools  |  Options ,\nor use some other method of determining if the command's functionality should be turned\noff.    IsActive Property  If  IsActive  returns  false , the command's  Enabled  property is automatically set to false.\nA common use for this property is to be able to check a  UI Context .    Text Property  The  Text  property, as its name suggests, sets the command's display text. Its initial value is  null ,\nwhich instructs the famework to use the value set in the  VSCT  file.",
            "title": "AsyncDynamicCommand"
        },
        {
            "location": "/api/#asyncstaticcommand",
            "text": "The  Luminous.Code.VisualStudio.Commands.AsyncStaticCommand  class is useful for commands whose text doesn't need to change,\nand which are always visible and always enabled.",
            "title": "AsyncStaticCommand"
        },
        {
            "location": "/api/#commandbase-deprecated",
            "text": "The  Luminous.Code.VisualStudio.Commands.CommandBase  class has been deprecated in favor of  AsyncCommandBase .",
            "title": "CommandBase (deprecated)"
        },
        {
            "location": "/api/#command-keys",
            "text": "",
            "title": "Command Keys"
        },
        {
            "location": "/api/#commandresult",
            "text": "CancelledResult    InformationResult    ProblemResult    SuccessResult",
            "title": "CommandResult"
        },
        {
            "location": "/api/#commandstatuses",
            "text": "",
            "title": "CommandStatuses"
        },
        {
            "location": "/api/#dynamiccommand-deprecated",
            "text": "The  Luminous.Code.VisualStudio.Commands.DynamicCommand  class has been deprecated in favor of  AsyncDynamicCommand .",
            "title": "DynamicCommand (deprecated)"
        },
        {
            "location": "/api/#staticcommand-deprecated",
            "text": "The  Luminous.Code.VisualStudio.Commands.DynamicCommand  class has been deprecated in favor of  AsyncDynamicCommand .",
            "title": "StaticCommand (deprecated)"
        },
        {
            "location": "/api/#constants-namespace",
            "text": "",
            "title": "Constants Namespace"
        },
        {
            "location": "/api/#vsversions",
            "text": "",
            "title": "VsVersions"
        },
        {
            "location": "/api/#extensions-namespace_1",
            "text": "",
            "title": "Extensions Namespace"
        },
        {
            "location": "/api/#integerextensions",
            "text": "",
            "title": "IntegerExtensions"
        },
        {
            "location": "/api/#iwpftextviewhostextensions",
            "text": "",
            "title": "IWpfTextViewHostExtensions"
        },
        {
            "location": "/api/#projectitemsextensions",
            "text": "",
            "title": "ProjectItemsExtensions"
        },
        {
            "location": "/api/#serviceproviderextensions",
            "text": "",
            "title": "ServiceProviderExtensions"
        },
        {
            "location": "/api/#packages-namespace",
            "text": "The  Luminous.Code.VisualStudio.Packages  namespace contains all of the plumbing code that\na Visual Studio package needs to interact with the Visual Studio IDE.",
            "title": "Packages Namespace"
        },
        {
            "location": "/api/#asyncpackagebase",
            "text": "The  Luminous.Code.VisualStudio.Packages.AsyncPackageBase  class is an abstract base class from which you inherit your own\npackages.    GetService<T>  The  GetService<T>  method is a small piece of syntactic sugar around  Package.GetService ,\nwhich avoids the need for typeof  and takes care of the cast to  T  as well.  I just find it nicer to be able to write  GetService<ISomeInterface>  than GetService(typeof(T)) as T .    GetService ()  The  GetService<TSource, TTarget>  method takes it a step further,\nfor when you need to query a service and cast it to an interface\n(which happens a lot when dealing with Visual Studio services).  Again, I find it nicer to write  GetService<SomeService, ISomeInterface> \nthan  GetService(typeof(TSource)) as TTarget .    GetServiceAsync ()  GetServiceAsync<T>  was going to be the async version of  GetService<T> ,\nso I could get my services in  InitializeAsync  before switching to the main thread.\nBut it turns out there was a problem I wasn't aware of, which meant that there was no benefit\nto have the async version.   Same went on to explain:     GetServiceAsync ()  GetServiceAsync<TSource, TTarget>  would suffer the same restriction,\nso again there was no need for the method.    ShowToolWindow<T>  The  ShowToolWindow<T>  method is for situations that only allow a single tool window.    ShowNewToolWindow<T>  The  ShowNewToolWindow<T>  method is for situations that allow multiple tool windows.    OpenFolder  The  OpenFolder  method opens the suppliedfolder path in a File Explorer window.  It abstracts away the  Microsoft.VisualStudio.Shell.Package  and commands that interact with the Visual Studio IDE.",
            "title": "AsyncPackageBase"
        },
        {
            "location": "/api/#packagebase-deprecated",
            "text": "The  Luminous.Code.VisualStudio.Packages.PackageBase  class has been deprecated in favor of the  AsyncPackageBase  class.",
            "title": "PackageBase (deprecated)"
        },
        {
            "location": "/api/#solutions-namespace",
            "text": "",
            "title": "Solutions Namespace"
        },
        {
            "location": "/api/#solutionexploreritemtype",
            "text": "",
            "title": "SolutionExplorerItemType"
        },
        {
            "location": "/api/#solutionitemkind",
            "text": "",
            "title": "SolutionItemKind"
        },
        {
            "location": "/api/#vshierarchies-namespace",
            "text": "",
            "title": "VSHierarchies Namespace"
        },
        {
            "location": "/api/#ivshierarchynodeinfo",
            "text": "",
            "title": "IVsHierarchyNodeInfo"
        },
        {
            "location": "/changelog/",
            "text": "Public Releases\n\u00b6\n\n\nv1.4.2 - 2019-07-20\n\u00b6\n\n\n\n\nminor fixes\n\n\n\n\nv1.4.1 - 2019-06-20\n\u00b6\n\n\n\n\nupdated AsyncPackageBase\n\n\n\n\nv1.4.0 - 2019-04-24\n\u00b6\n\n\n\n\nported the methods/properties from PackageBase to AsyncPackageBase\n\n\nported the methods/properties from CommandBase to AsyncCommandBase\n\n\nported the methods/properties from DynamicCommand to AsyncDynamicCommand\n\n\nfixed bug in \nContextIsActive\n\n\ndeprecated PackageBase, CommandBase, StaticCommand, DynamicCommand\n\n\nconsolidated all extension methods under the \nLuminous.Code.Extentions\n or \nLuminous.Code.VisualStudio.Extensions\n namespace\n\n\n\n\nv1.3.0 - 2019-04-08\n\u00b6\n\n\n\n\nadded PackageBase.OpenManageExtensions\n\n\nadded PackageBase.OpenFileInBrowser\n\n\nadded PackageBase.OpenTextFile command\n\n\nadded PackageBase.OpenFile method\n\n\nadded PackageBase.OpenFolder method\n\n\n\n\nv1.2.1 - 2019-04-04\n\u00b6\n\n\n\n\nfixed OpenFile/OpenFileInBrowser displaying incorrect problem message\n\n\nadded AsyncDynamicCommand\n\n\nadded AsyncCommandBase\n\n\nadded AsyncPackageBase\n\n\n\n\nv1.0.3 - 2018-01-26\n\u00b6\n\n\n\n\nAdd \nShowNewToolWindow<T>\n to \nPackageBase\n\n\n\n\nv1.0.2 - 2017-11-24\n\u00b6\n\n\n\n\nminor changes\n\n\n\n\nv1.0.1 - 2017-04-09\n\u00b6\n\n\n\n\nInitial public release\n\n\nCore\n\n\nException\n Extensions\n\n\nString\n Extensions\n\n\nString\n Concatenation\n\n\n\n\n\n\nVisual Studio\n\n\nCommandKeys\n class\n\n\nCommandStatuses\n enum\n\n\nCommandBase\n class\n\n\nStaticCommand\n class\n\n\nDynamicCommand\n class\n\n\nCommandResult\n class\n\n\nSuccessResult\n class\n\n\nCancelledResult\n class\n\n\nInformationResult\n class\n\n\nProblemResult\n class\n\n\nServiceProvider\n Extensions\n\n\nIWpfTextViewHost\n Extensions\n\n\nPackageBase\n class\n\n\nProjectItems\n Extensions\n\n\nProject\n Extensions\n\n\nSelectedItems\n Extensions\n\n\nSolutionExplorerItemType\n enum\n\n\nSolutionItemKind\n class\n\n\nIVsHierarchyNodeInfo\n Class",
            "title": "Change Log"
        },
        {
            "location": "/changelog/#public-releases",
            "text": "",
            "title": "Public Releases"
        },
        {
            "location": "/changelog/#v142-2019-07-20",
            "text": "minor fixes",
            "title": "v1.4.2 - 2019-07-20"
        },
        {
            "location": "/changelog/#v141-2019-06-20",
            "text": "updated AsyncPackageBase",
            "title": "v1.4.1 - 2019-06-20"
        },
        {
            "location": "/changelog/#v140-2019-04-24",
            "text": "ported the methods/properties from PackageBase to AsyncPackageBase  ported the methods/properties from CommandBase to AsyncCommandBase  ported the methods/properties from DynamicCommand to AsyncDynamicCommand  fixed bug in  ContextIsActive  deprecated PackageBase, CommandBase, StaticCommand, DynamicCommand  consolidated all extension methods under the  Luminous.Code.Extentions  or  Luminous.Code.VisualStudio.Extensions  namespace",
            "title": "v1.4.0 - 2019-04-24"
        },
        {
            "location": "/changelog/#v130-2019-04-08",
            "text": "added PackageBase.OpenManageExtensions  added PackageBase.OpenFileInBrowser  added PackageBase.OpenTextFile command  added PackageBase.OpenFile method  added PackageBase.OpenFolder method",
            "title": "v1.3.0 - 2019-04-08"
        },
        {
            "location": "/changelog/#v121-2019-04-04",
            "text": "fixed OpenFile/OpenFileInBrowser displaying incorrect problem message  added AsyncDynamicCommand  added AsyncCommandBase  added AsyncPackageBase",
            "title": "v1.2.1 - 2019-04-04"
        },
        {
            "location": "/changelog/#v103-2018-01-26",
            "text": "Add  ShowNewToolWindow<T>  to  PackageBase",
            "title": "v1.0.3 - 2018-01-26"
        },
        {
            "location": "/changelog/#v102-2017-11-24",
            "text": "minor changes",
            "title": "v1.0.2 - 2017-11-24"
        },
        {
            "location": "/changelog/#v101-2017-04-09",
            "text": "Initial public release  Core  Exception  Extensions  String  Extensions  String  Concatenation    Visual Studio  CommandKeys  class  CommandStatuses  enum  CommandBase  class  StaticCommand  class  DynamicCommand  class  CommandResult  class  SuccessResult  class  CancelledResult  class  InformationResult  class  ProblemResult  class  ServiceProvider  Extensions  IWpfTextViewHost  Extensions  PackageBase  class  ProjectItems  Extensions  Project  Extensions  SelectedItems  Extensions  SolutionExplorerItemType  enum  SolutionItemKind  class  IVsHierarchyNodeInfo  Class",
            "title": "v1.0.1 - 2017-04-09"
        },
        {
            "location": "/roadmap/",
            "text": "Product Backlog\n\u00b6\n\n\nThe \nproduct backlog\n is a list of \nproduct backlog items\n (also known as \nPBI's\n for short).\nThe \nPBI's\n listed below are \nfeatures\n or \nenhancements\n that or may not be added into \nTime Savers\n.\n\n\nHowever, no code has been written for them yet, and they could be removed from the \nproduct backlog\n at any time. \n\n\n\n\nThere are no public product backlog items at the moment\n\n\n\n\n\n\nHelp Out\n\u00b6\n\n\nIf you'd like to implement one of the the \nPBI's\n from the \nproduct backlog\n,\nfeel free to open an \nIssue on GitHub\n (with the same name that the PBI has here), \nand we can start a discussion there. We can then work toward developing a pull request,\nso the implemented feature can be incorporated into \nTime Savers\n.\n\n\nDon't forget to check out the \nContributing Guidelines on GitHub\n.\n\n\n\n\nBeta Features\n\u00b6\n\n\nBeta features are \nPBI's\n that have actually had some code written for them,\nand are waiting for that code to be tested. \n\n\nYou can add it on your own project, and confirm that it does what it's supposed to do.\nIf you do find a problem, you can create a \nBug Report on GitHub\n.\n\n\nOnce they've passed testing they'll be included in the \nnext public release\n of \nTime Savers\n.\n\n\n\n\nThere are no beta features that need testing at the moment\n\n\n\n\n\n\nBug Fixes\n\u00b6\n\n\nOnce bug fixes have been fully tested, they'll be included in the \nnext public release\n.\n\n\n\n\nThere are no bug fixes that need testing at the moment",
            "title": "Roadmap"
        },
        {
            "location": "/roadmap/#product-backlog",
            "text": "The  product backlog  is a list of  product backlog items  (also known as  PBI's  for short).\nThe  PBI's  listed below are  features  or  enhancements  that or may not be added into  Time Savers .  However, no code has been written for them yet, and they could be removed from the  product backlog  at any time.    There are no public product backlog items at the moment",
            "title": "Product Backlog"
        },
        {
            "location": "/roadmap/#help-out",
            "text": "If you'd like to implement one of the the  PBI's  from the  product backlog ,\nfeel free to open an  Issue on GitHub  (with the same name that the PBI has here), \nand we can start a discussion there. We can then work toward developing a pull request,\nso the implemented feature can be incorporated into  Time Savers .  Don't forget to check out the  Contributing Guidelines on GitHub .",
            "title": "Help Out"
        },
        {
            "location": "/roadmap/#beta-features",
            "text": "Beta features are  PBI's  that have actually had some code written for them,\nand are waiting for that code to be tested.   You can add it on your own project, and confirm that it does what it's supposed to do.\nIf you do find a problem, you can create a  Bug Report on GitHub .  Once they've passed testing they'll be included in the  next public release  of  Time Savers .   There are no beta features that need testing at the moment",
            "title": "Beta Features"
        },
        {
            "location": "/roadmap/#bug-fixes",
            "text": "Once bug fixes have been fully tested, they'll be included in the  next public release .   There are no bug fixes that need testing at the moment",
            "title": "Bug Fixes"
        },
        {
            "location": "/license/",
            "text": "License\n\u00b6\n\n\n\n\nCopyright (c) 2017-2019 Luminous Software Solutions\n\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.",
            "title": "License"
        },
        {
            "location": "/license/#license",
            "text": "Copyright (c) 2017-2019 Luminous Software Solutions  Permission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:  The above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.",
            "title": "License"
        }
    ]
}